# mini‑ca

---

```markdown
<!-- ────────────────────────────────────────────────────────── -->
<!--  mini‑ca ⸺ a pocket‑sized Certificate Authority          -->
<!--  © 2024‑present – MIT‑licensed                            -->
<!-- ────────────────────────────────────────────────────────── -->

<div align="center">

# 🔐 mini‑ca
*A zero‑dependency CA in a single Docker image*

[![CI](https://img.shields.io/badge/build-passing-brightgreen)](#)
[![license](https://img.shields.io/badge/license-MIT-blue)](#)

</div>

---

## Contents <!-- omit in toc -->

1. [Highlights](#highlights)
2. [Quick start](#quick-start)
3. [Repo layout](#repo-layout)
4. [Docker stack](#docker-stack)
5. [The CLI](#the-cli)
6. [Live domain‑watch](#live-domainwatch)
7. [Make targets](#make-targets)
8. [Clean ↔ Rebuild](#clean-↔-rebuild)
9. [💣 make nuke – full reset](#make-nuke--full-reset)
10. [Configuration](#configuration)
11. [Troubleshooting](#troubleshooting)

---

## Highlights

| ✔︎ | Feature |
|----|---------|
| **One‑shot root CA** – `entry-init.sh` generates a 10‑year self‑signed *rootCA.key* + *rootCA.crt*. |
| **Offline image** – all wheels baked during build, **no network I/O at runtime**. |
| **Idempotent init** – safe re‑runs; add `--force` to rotate keys. |
| **Leaf certs on demand** – `issue <domain> [--san alt …]` writes key/cert/chain into its own folder. |
| **Wildcard + SAN support** – `*.dev` + unlimited `--san host1 --san host2`. |
| **Batch watch** – a long‑running container tails `DOMAINS` and auto‑issues. |
| **Named volume** – everything lives under **`minica-data`** (`/data` in the container). |
| **Profiles & Roles** – *init* (bootstrap) vs *minica* (watcher) vs *cli* (side‑car). |
| **Makefile UX** – `build • setup • up • stop • clean • nuke`. |
| **Colourised logs** – success messages begin with `✅`. |
| **Full teardown** – `make nuke` wipes containers, volume, images, builder cache. |

---

## Quick start

```bash
git clone https://github.com/your‑org/mini-ca.git
cd mini-ca

# 1. Build image & create root CA (+ volume)
make setup             # docker compose --profile setup up --build

# 2. Start the live watcher
make up                # docker compose up -d

# 3. Issue a cert anytime
docker compose run --rm cli \
        issue blog.acme.test --san www.blog.acme.test
```

Files appear under the volume:

``` tree
/data/
├─ rootCA/
│  ├─ rootCA.key
│  └─ rootCA.crt
└─ certificates/
   └─ blog.acme.test/
      ├─ blog.acme.test.key
      ├─ blog.acme.test.crt
      └─ chain.pem        (root + leaf)
```

Import *rootCA.crt* into your trust store → browser green‑locks all leaf certs.

---

##  Repo layout

```tree
mini-ca/
├─ docker/
│  ├─ Dockerfile
│  ├─ entry.sh          # default entrypoint (watch service)
│  └─ entry-init.sh     # one‑shot CA bootstrap
├─ run/                 # pure‑Python CA logic (Typer CLI)
│  ├─ mini_ca.py
│  ├─ init_ca.py | issue_cert.py | watch.py | …
├─ docker-compose.yml   # production bundle
├─ Makefile             # convenience wrapper
├─ requirements.txt     # runtime deps (wheels cached)
└─ README.md
```

---

##  Docker stack

| Service  | Profile   | Role | Entry | Auto‑restart |
|----------|-----------|------|-------|--------------|
| **init** | `setup`   | bootstrap root CA      | `entry-init.sh` | *no* |
| **cli**  | `cli`     | ad‑hoc commands        | `entry.sh`      | *no* |
| **minica** | default | live watcher           | `entry.sh`      | `unless-stopped` |

Volume: **`minica-data`** mounts to `/data` in every container.

---

##  The CLI

```text
mini_ca.py init   [--force]
mini_ca.py issue  DOMAIN [--san ALT_SAN …]
mini_ca.py watch  [--file /data/DOMAINS]
```

* **init** – generate or rotate the root CA.
* **issue** – create key/cert/chain for *DOMAIN* (supports wildcards).
* **watch** – follow a text file and issue for each new line.

Run from any container (or the host if you mount the volume):

```bash
docker run --rm -v minica-data:/data minica \
       mini_ca.py issue "*.wild.dev" --san api.wild.dev
```

---

##  Live domain‑watch

1. `make up` (starts the *minica* watcher).
2. Append lines to `/data/DOMAINS` → certificates appear.

Append from the host:

```bash
echo "store.acme.dev" | \
  docker run --rm -i -v minica-data:/data alpine sh -c 'cat >>/data/DOMAINS'
```

The watcher logs: `✅  Certificate issued for 'store.acme.dev'`.

---

##  Make targets

| Target      | Description |
|-------------|-------------|
| **build**   | Build / rebuild the image (`docker compose build`). |
| **setup**   | Build *and* run the `init` profile → creates volume & root CA. |
| **up**      | Start the watcher (`docker compose up -d`). |
| **stop**    | Soft stop containers (volume kept). |
| **clean**   | Stop & remove containers **and** the volume `minica-data`. |
| **nuke**    | Full wipe: containers + volume + `minica:*` images + BuildKit cache. |

Optional vars:

```bash
WATCH=0 make up      # skip starting the watcher
UID=1234 make build  # bake a different runtime uid
```

---

##  Clean ↔ Rebuild

| Action                         | Command |
|--------------------------------|---------|
| Tear down & keep data          | `make stop` |
| Tear down & **delete data**    | `make clean` |
| Re‑initialise root CA          | `make setup` |
| Start fresh watcher            | `make up` |

Root CA changes every time you run **setup**.
Back it up if clients already trust it.

---

##  make nuke – full reset

```bash
make nuke
```

* Stops **all** running *mini‑ca* containers.
* Runs `docker compose down --volumes`.
* Deletes volume **minica-data**.
* Removes every local image tagged `minica:*`.
* Clears BuildKit cache (`docker builder prune -f`).

You’re back to zero; follow *Quick‑start* again.

---

##  Configuration

| Variable          | Default            | Purpose |
|-------------------|--------------------|---------|
| `MYCA_ROOT`       | `/data/rootCA`     | root CA folder |
| `MYCA_CERTS`      | `/data/certificates` | leaf certificates |
| `UID` (build‑arg) | `1001`             | runtime user id |

Edit `docker-compose.yml` or pass `--build-arg UID=…` as you prefer.

---

##  Troubleshooting

| Problem | Fix |
|---------|-----|
| `Permission denied: '/data/DOMAINS'` | volume from previous run; `make clean` or `make nuke`. |
| `No such option --force` in logs     | stale image; `make build`. |
| Want interactive watch w/out lock‑up | `docker compose run -d cli watch` then `docker logs -f …`. |
| Disk space from old builds           | `make nuke` clears images & cache. |

---

###  License

[MIT](LICENSE) – do whatever you want; star the repo if you find it useful ❤️

---
