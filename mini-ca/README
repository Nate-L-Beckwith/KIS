<!-- Removed empty fenced code block -->
<!-- ────────────────────────────────────────────────────────── -->
<!--  mini‑ca ⸺ a pocket‑sized Certificate Authority          -->
<!--  © 2024‑present – MIT‑licensed                            -->
<!-- ────────────────────────────────────────────────────────── -->

# 🔐 mini‑ca

A zero‑dependency Certificate Authority in one Docker image
*A zero‑dependency Certificate Authority in one Docker image*
[![build](https://img.shields.io/badge/build-passing-brightgreen)](https://github.com/your-org/mini-ca)
[![license](https://img.shields.io/badge/license-MIT-blue)](https://github.com/your-org/mini-ca)
[![license](https://img.shields.io/badge/license-MIT-blue)](LICENSE)

</div>

---

##  Contents <!-- omit in toc -->

1. [Highlights](#highlights)
2. [Quick start](#quick-start)
3. [Repo layout](#repo-layout)
4. [Docker stack](#docker-stack)
5. [The CLI](#the-cli)
6. [Live domain‑watch](#live-domainwatch)
7. [Clean and Rebuild](#cleanrebuild)
8. [💣 make nuke full reset](#make-nuke-full-reset)
9. [Configuration](#configuration)
10. [Best practices & CI notes](#best-practices--ci-notes)
11. [Troubleshooting](#troubleshooting)

---

##  Highlights

| ✔︎ | Feature |
| **One‑shot root CA** | `entry‑init.sh` writes a 10‑year *rootCA.key* + *rootCA.crt*. |
| **Offline image** | wheels baked at build time, **no network hits in prod**. |
| **Idempotent init** | safe re‑runs; add `--force` to rotate keys. |
| **Leaf certs on demand** | `issue <domain> [--san alt]` drops key/cert/chain in its own dir. |
| **Wildcard & SAN** | `*.dev` + unlimited `--san host`. |
| **Batch watcher** | tails `/data/DOMAINS` → auto‑issues. |
| **Named volume** | **`minica‑data`** keeps everything between runs. |
| **Profiles** | *init* (bootstrap), *minica* (watcher), *cli* (on‑demand commands). |
| **Friendly Makefile** | `help, build, init, setup, up, logs, clean, nuke`. |
| **Colourised logs** | successes begin with `✅`. |
| **Hard reset** | `make nuke` wipes containers + volume + images + BuildKit cache. |
| **Hard reset** – `make nuke` wipes containers + volume + images + BuildKit cache. |

---

##  Quick start

```bash
git clone https://github.com/your‑org/mini-ca.git
cd mini-ca

# 1️⃣  build image + create root CA
make setup              # (build ▸ init ▸ up)

# 2️⃣  issue a cert anytime
docker compose run --rm cli \
        issue blog.acme.test --san www.blog.acme.test
```

Result inside the volume:

```text
/data/
├─ rootCA/
│  ├─ rootCA.key
│  └─ rootCA.crt
└─ certificates/
   └─ blog.acme.test/
      ├─ blog.acme.test.key
      ├─ blog.acme.test.crt
      └─ chain.pem
```

Import **rootCA.crt** into your OS/browser → every issued cert is trusted.

---

##  Repo layout

```text
mini-ca/
├─ docker/
│  ├─ Dockerfile         <-- multi‑stage build
│  ├─ entry.sh           <-- default entrypoint (watch / CLI)
│  └─ entry-init.sh      <-- bootstrap root CA (one‑shot)
├─ run/                  <-- pure‑Python CA code (Typer CLI)
│  ├─ mini_ca.py         <-- main CLI
│  ├─ init_ca.py | issue_cert.py | watch.py | …
├─ docker-compose.yml    <-- production bundle / profiles
├─ Makefile              <-- convenience wrapper
├─ requirements.txt      <-- runtime deps (wheels cached)
└─ README.md
```

---

##  Docker stack

| Service   | Profile(s)      | Role                       | Entrypoint       | Restart |
|-----------|-----------------|----------------------------|------------------|---------|
| **init**  | `setup`         | one‑shot CA bootstrap      | `entry-init.sh`  | *no*    |
| **cli**   | `cli` (manual)  | ad‑hoc CA commands         | `entry.sh`       | *no*    |
| **minica**| default         | live domain‑watch          | `entry.sh`       | `unless‑stopped` |

All share the named volume **`minica‑data`** (`/data` inside).

---

##  The CLI

```text
mini_ca.py init   [--force]
mini_ca.py issue  DOMAIN [--san ALT_SAN …]
mini_ca.py watch  [--file /data/DOMAINS]
```

* **init** – generate/rotate root CA (*--force* to overwrite).
* **issue** – create leaf cert + private key + full chain.
* **watch** – continuous domain file processing.

*On‑demand example*:

```bash
docker run --rm -v minica-data:/data minica \
       mini_ca.py issue "*.wild.dev" --san api.wild.dev
```

---

##  Live domain‑watch

1. `make up` – watcher starts and tails `/data/DOMAINS`.
2. Append hostnames (one per line) → certificates appear instantly.

```bash
echo "store.acme.dev" | docker compose exec -T cli sh -c 'cat >>/data/DOMAINS'
```

---

##  Make targets

| Target      | What it does |
|-------------|--------------|
| **help**    | Show colourised help (default output). |
| **build**   | `docker compose build` (all services). |
| **init**    | One‑shot root‑CA bootstrap (`--rm` container). |
| **setup**   | **build ▸ init ▸ up** – first‑run bootstrap. |
| **up**      | Start (or restart) live watcher. |
| **logs**    | Follow watcher logs. |
| **clean**   | Stop stack & network; keep images & volume. |
| **nuke**    | **Full wipe** – containers, volume, images, BuildKit cache. |

Environment overrides:

```bash
PROJECT=mydemo make setup   # custom compose project‑name
UID=1000        make build  # bake different runtime uid
WATCH=0         make up     # start stack *without* watcher
```

---

##  Clean ↔ Rebuild

| Goal                          | Command |
|-------------------------------|---------|
| Stop stack, keep data         | `make clean` |
| Rotate root CA                | `make init` *(adds `--force` inside)* |
| Rotate root CA                | `make init` (adds `--force` inside) |
| Rotate root CA                | `make init` *(adds `--force` inside)* |

---

##  make nuke – full reset

```bash
make nuke
# …
# ✅  project 'mini‑ca' wiped clean
```

Sequence performed:

1. `docker compose down --volumes`.
2. Force‑remove any stray container using the image.
3. Delete volume **minica‑data**.
4. Remove *every* local tag `minica:*`.
5. `docker builder prune -f` – scrub BuildKit cache.

Afterwards: `make setup` to bootstrap again.

---

##  Configuration

| Variable (env / build‑arg) | Default              | Meaning |
|----------------------------|----------------------|---------|
| `MYCA_ROOT`                | `/data/rootCA`       | root CA folder |
| `MYCA_CERTS`               | `/data/certificates` | leaf certs folder |
| `UID` (build‑arg)          | `1001`               | runtime user id |

Set via `docker compose build --build-arg UID=$(id -u)` or editing the compose file.

---

##  Best practices & CI notes

* **Back up** `/data/rootCA/rootCA.key` & `rootCA.crt` before deploying clients.
* Use two compose projects in CI: one for *init* only (produces artefacts), another for integration tests.
* Mount the volume read‑only in production containers that only need to **read** certificates.
* Run `mini_ca.py issue` in CI to mint short‑lived certs for test suites.

---

##  Troubleshooting

| Symptom | Fix |
|---------|-----|
| `Permission denied: '/data/DOMAINS'` | Run `make clean` – you’re probably re‑using a root‑owned volume. |
| `FileNotFoundError rootCA.key`       | You skipped `make init` / `make setup`. |
| Terminal “hangs” after `docker compose run cli watch` | That command runs **interactive**; add `-d` or use the watcher service. |
| Disk space keeps growing             | `make nuke` wipes all images & cache. |
